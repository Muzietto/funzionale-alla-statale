SLIDE 1
Marco - ESERCITAZIONE ALLA STATALE
----------------------------------

SLIDE 2
-------
1) JavaScript
SLIDE 3
-------
- short history
- nel browser: DOM
pagina con horizon red div #mainDiv
console: var theDiv = window.getElementById('v')
theDiv.innerHTML = '<a href="http://google.com">GOOGLE</a>'
theDiv.addEventListener("mouseenter", function(){
    this.style.background = "yellow";
});
theDiv.addEventListener("mouseleave", function(){
    this.style.background = "white";
});
- use CSS to style the DOM
- the best of JS has nothing to do with webpages!

SLIDE 4
-------
function plus1(x) { return x+1; }
[1,2,3,4].map(plus1)

[1,2,3,4].reduce(function(x,y){ return x*y },1)

function XXXXX(acc,x,i){ return (acc*i + x)/(i+1) }
[1,2,3,4].reduce(XXXX,0);

- sul server: node.js
[show http-server]

SLIDE 5
-------
2) a language without types
- Chrome console: var pippo = 12
- typeof pippo
- pippo + 1

- pippo = 'dodici'
- typeof pippo
- pippo + 'pluto'
- pippo + 12

pippo = { nome:'giuseppe', età:12 }
typeof pippo
pippo.nome
pippo.età
pippo['nome']
var key = 'età'
pippo[key]

pippo = ['giuseppe', 12]
typeof pippo
pippo[0]
pippo[1]

- freedom requires discipline...
- adding types to JS is just wrong, wrong, wrong....

SLIDE 6
-------
3) chi ci salva? le FUNZIONI!

function leaf(label){
  return { label : label }
}
var leaf12 = leaf(12);
leaf12
leaf12.label

function leaf(label){
  return { getLabel: function(){ return label; }}
}
leaf12 = leaf(12)
leaf12
leaf12.getLabel()

function leaf(label){
  return function(w){
    return w(label);
  }
}
leaf12 = leaf(12)
var id = function(x){ return x; }
leaf12(id)

function label(leaf){
  return leaf(id);
}
label(leaf12)

function node(left,right){
  return function(w){
    return w(left,right);
  }
}

var bintree = node(leaf('a'),node(leaf('b'),leaf('c')));

function left(node){
  return node(function(l,r){
    return l;
  })
}

left(bintree)
label(left(bintree))

function right(tree){
  return tree(function(l,r){
    return r;
  });
}

label(right(right(bintree)))

- per i veri nostalgici dei tipi...
function leaf(label){
  return function leaf(w){
    return w(label);
  }
}
leaf('a').name
leaf('b').name
switch(tree.name){
  case 'leaf':
    ...
    break;
  case 'node':
    ...
    break;
}

- REM: JS allows pattern matching!!!

4) a bit about lists
- they're no binary trees
- official name is ARRAY 

var pippo = [1,2,3,4]
pippo.slice(1)
pippo

function tail(list){
  return list.slice(1);
}

pippo.slice(0,1)
function head(list){
  return list.slice(0,1)[0];
}

- copia di un'array?
var pluto = pippo.slice()

function cons(atom,list){
  return [atom].concat(list);
}

pippo.concat(pippo)
pippo

function cons(atom,list){
  return [atom].concat(list);
}
cons(0,pippo)

5) recursion
function FL(l,f,a){
  if (l.length === 0) {
    return a;
  }
  return FL(tail(l),f,f(a,head(l)));
}
FL([1,2,3,4],function(x,y){ return x+y; },0)

function CY(f){
  return function(x){
    if (f.length === 1){
      return f(x);
    }
    return CY(f.bind(null, x));
  }
}
function sommaTre(x,y,z){ return x+y+z; }(1,2,3)
CY(sommaTre)(1)(2)(3)

6) writer monad
- [value,monoid]
- monoide --> elemento neutro (m_empty) + operatore binario (m_append) + proprietà associativa

function writer(couple){
  var monad = couple.slice();
  var m_empty = null;
  var m_append = null;
  monad.bind = function(faw){
    var newCouple = faw(monad[0]);
    return writer([newCouple[0], m_append(monad[1], newCouple[1])]);
  }
  return monad;
}


7) further pointers
- libro crockford
- https://developer.mozilla.org/en-US/docs/Web/JavaScript
- underscore.js && libro Fogus
- JavaScript allongè
- Axel Rauschmayer, Matt Might, Douglas Crockford, Reginald Braithwaite

- the Little/Seasoned Schemer
- SICP
- Clojure!!!!!!!!

- craftmanship, craftmanship, craftmanship...
